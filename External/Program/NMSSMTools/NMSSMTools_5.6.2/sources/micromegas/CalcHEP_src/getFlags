:

findMAKE()
{
if(test -x "`which gmake`") then
    MAKE=gmake
else
    MAKE=make
fi
} 


findMakeVar()
{  
cat >Makefile <<EOF
all:
	@echo \$($1)
EOF
$MAKE
}


defaultFlags()
{

  UNAME=`uname`
  unKnownC=Yes
  gccExt=  
  if(test -n "$CC") then 
     if(test "$CC" = icc) then
       CFLAGS="-g -fsigned-char -Qoption,cpp,--extended_float_type -std=gnu99 -fPIC"
       CXX=icpc
       CXXFLAGS="-g  -Qoption,cpp,--extended_float_type -fPIC"
       unKnownC=
     else
       gccExt=`echo $CC |sed s/gcc//`
       gcc=gcc$gccExt
       if(test $CC = $gcc) then 
          CFLAGS="-g -fsigned-char -std=gnu99 -fPIC"
          CXX=g$gccExt++
          CXXFLAGS="-g -fPIC"
          unKnownC=
       else 
          if(test $CC = cc) then
             CFLAGS="-g -fsigned-char -std=gnu99 -fPIC"
             CXX=c++
             CXXFLAGS="-g -fPIC"
             unKnownC=
          else 
            CFLAGS="-g -std=gnu99 -fPIC"
            CXX=$CC
            CXXFLAGS="-g -fPIC"
            echo Unknown compiler $CC  
          fi
       fi
     fi
  else
    if(test "$UNAME" = Darwin) then 
       CC=clang
       CXX=clang++
    else 
       CC=gcc
       CXX=g++
       echo   CC=gcc by default
    fi
    CFLAGS="-g -fsigned-char -std=gnu99 -fPIC"
    CXXFLAGS="-g -fPIC"
    unKnownC=
  fi

echo UNAME=$UNAME ???

   if(test "$UNAME" = Darwin) then
     RANLIB="ranlib -c"
     SONAME="-install_name "
     lDL=-ldl
   else 
     RANLIB="ranlib" 
     SONAME=
     lDL="-rdynamic -ldl"  
   fi

   case `uname` in 
     CYGWIN*)
       SO=so
     ;;   
     *) 
       SO=dll
     ;;
    esac

   if(test $CC = clang) then 
       SHARED=-dynamiclib
   else 
       SHARED=-shared
   fi  


   FC=gfortran
   FFLAGS="-fno-automatic"
   if(test "$UNAME" = Darwin) then 
       lFort="-L/sw/lib  -lgfortran"   
   else 
        lFort=-lgfortran
   fi     

   
   HXll=  
   LX11=-lX11
   SNUM=
   SO=so
}

writeFlags()
{
echo "# C compiler
CC=\"$CC\" 

# Flags for C compiler 
# Use -D_LONG_ to implement 'long double' for numerical calculations with gcc compiler. 
# Use '-Qoption,cpp,--extended_float_type  -D_QUAD_'  flag for icc compiler to works
# with quadrouple precision  
CFLAGS=\"$CFLAGS\"

# Disposition of header files for X11 
HX11=$HX11

# Disposition of lX11  
LX11=\"$LX11\"

# Library which supports runtime  loading of shared libraries  
lDL=\"$lDL\"

# C Flag which forces compilation of  shared library 
SHARED=\"$SHARED\"

# FLAG to define  "shared_object_name" for shared library
SONAME=\"$SONAME\"

#Suffix for shared libraies
SO=$SO


# Flag which defines type of numbers used in symbolic calculations 
# it could be -DNUM_DOUBLE ,  -DNUM_LONG_LONG  -DNUM_LONG
SNUM=$SNUM

# Fortran compiler
FC=\"$FC\"

# Flags for Fortran compiler
FFLAGS=\"$FFLAGS\"

# Special Fortran libraries one has to pass to C linker
lFort=\"$lFort\"

# C++ compiler
CXX=\"$CXX\"

CXXFLAGS=\"$CXXFLAGS\"

# RANLIB 
RANLIB=\"$RANLIB\"

# MAKE 
MAKE=$MAKE        

# Quadruple
lQuad=\"$lQuad\" 

export CC CFLAGS  lDL LX11 SHARED SONAME SO FC FFLAGS RANLIB CXX CXXFLAGS lFort lQuad MAKE 
" > ../FlagsForSh    
}

#MAKE
writeFlagsForMake()
{
echo "# compiler Flags
CC = $CC
CFLAGS = $CFLAGS
HX11 = $HX11
LX11 = $LX11
lDL = $lDL 
SHARED = $SHARED
SONAME = "$SONAME"
SO = $SO
SNUM = $SNUM

FC = $FC 
FFLAGS = $FFLAGS
RANLIB = $RANLIB
lFort = $lFort
lQuad = $lQuad
CXX=$CXX    
CXXFLAGS = $CXXFLAGS 
CALCHEP = `pwd`
UNAME = `uname`
export CC CFLAGS  lDL LX11 SHARED SONAME SO FC FFLAGS RANLIB CXX CXXFLAGS lFort

" > FlagsForMake
}


testCC()
{
# Testing of C-compiler

if(test ! -x "`which $CC`") then 
  echo Can not find C compiler  $CC
  echo  ... trying  gcc ...
  if(test -x "`which gcc`") then
     CC=gcc
     CFLAGS="-g -fsigned-char -std=gnu99 -fPIC"
     CXX=g++
     CXXFLAGS="-g -fPIC"
     SONAME=
     SHARED=-shared
     lDL="-rdynamic -ldl"
  else   
     echo gcc also is not detected ...
     echo Write down the compile name  and its options in FlagsForSh file.
     echo "     CC=\".....\""
     echo "     CFLAGS=\".....\""
     return 1
  fi
fi  

cat >test.c <<EOF
int main(void)
{ char a,b;
  a=1;
  b=-a;
  if(a>b) return 0;else return 1;
}
EOF

$CC -o a.out test.c  1>/dev/null 2>/dev/null
if(test $? -ne 0)then
  echo  Fatal problem with C compiler.
  return 1
fi 


$CC -o a.out test.c $CFLAGS 1>/dev/null 2>/dev/null
if(test $? -ne 0)then
  echo  Wrong compiler options for $CC
  return 1
fi 


#test for character type
./a.out
if(test $? -ne 0) then
  echo  C compiler uses unsigned char type. 
  echo  Improve CFLAGS  in FlagsForSh file to have char signed.
  return  1
fi 

cat >test.c <<EOF
#include"../include/nType.h"
int main(void)
{ 

#ifdef _QUADGCC_
   return 5;
#else 
   return 6;
#endif   
   return 0;
}
EOF

$CC $CFLAGS  -c test.c  1>/dev/null 2>/dev/null
if(test $? -ne 0) then
  echo  C compiler does not support numerical type defined in CalcHEP/include/nType.h
  echo  One needs icc for _QUADICC_ and gcc for _QUADGCC_
  echo  Change  compiler and  flags or numerical type in nType.h 
  return  1
fi 

rm ./a.out
$CC $CFLAGS  test.c  1>/dev/null 2>/dev/null
./a.out
if(test $? -eq 5) then 
   lQuad="-lquadmath"
else 
   lQuad=
fi 

cat >test.c <<EOF
#include<math.h>
#include"../include/nType.h"
REAL main(void)
{ 
   REAL a=0.1;
   REAL s=Sin(a);
   return s;
}
EOF

$CC $CFLAGS  test.c  -lm $lQuad    1>/dev/null 2>/dev/null
if(test $? -eq 0) then 
   echo numerical type Ok
else 
   echo Problem in usage of numerical type defined in CalcHEP/include/nType.h
   return 1
fi

echo C compiler detected
return 0  

}

testX11()
{
cat >test.c<<EOF
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/keysym.h>
int  main(void)
{
  static Display *display;
  display = XOpenDisplay (NULL);
  return 0;
}
EOF

$CC -c $HX11 test.c 1>/dev/null 2>/dev/null
if(test $? -eq 0) then 
  $CC -o a.out test.o $LX11  1>/dev/null 2>/dev/null
  if(test $? -eq 0) then
    writeFlags
    echo X11 OK
    return 0 
  else 
    rm -f a.out
    return 2; 
  fi
else return 1
fi
}

findX11()
{
  echo  search by xmkmf
  if(test -f makefile) then mv makefile makefile.bak; fi
  if(test -f Makefile) then mv Makefile Makefile.bak; fi

cat > Imakefile <<'EOF'
findx:
	@echo 'im_incroot="${INCROOT}"; im_usrlibdir="${USRLIBDIR}"; im_libdir="${LIBDIR}"'
EOF
  if (xmkmf) >/dev/null 2>/dev/null && test -f Makefile; then 
    eval `make findx 2>/dev/null | grep -v make`
    HX11=-I$im_incroot
    LX11="-L$im_usrlibdir -lX11"
    testX11
    err=$?
  else err=3; fi 
  if(test -f makefile.bak) then mv makefile.bak makefile; else rm -f makefile; fi
  if(test -f Makefile.bak) then mv Makefile.bak Makefile; else rm -f Makefile; fi
  rm -f Imakefile 

  if (test $err -eq 0 ) then return 0; fi
   
  echo "      fails"
  echo search X11 according to list of possible distinations

XLIST="X11R7/Z X11R6/Z X11R5/Z X11R4/Z  Z/X11R7 Z/X11R6 Z/X11R5 Z/X11R4
 local/X11R7/Z local/X11R6/Z local/X11R5/Z local/X11R4/Z
 local/Z/X11R7 local/Z/X11R6 local/Z/X11R5 local/Z/X11R4
 X11/Z Z/X11 local/X11/Z local/Z/X11 X386/Z x386/Z
 local/Z openwin/Z openwin/share/Z"

#============== search x-includes from XLIST =====================

  for dir in $XLIST
  do
    test_dir=/usr/`echo $dir|sed s/Z/include/`

    if( test -r "$test_dir/X11/Xlib.h") then
      HX11=-I$test_dir
      test_dir=/usr/`echo $dir|sed s/Z/lib/`
      LX11="-L$test_dir -lX11"
      testX11
      if(test $? -eq 0) then 
         writeFlags
         echo X11 ok
         return 0
      fi
    fi
  done
  echo "      fails"
  return 1
} 

testFC()
{  
cat >test.f <<EOF
C     TEST     
      WRITE(*,*) 'test program'
      END
EOF

  if(test ! -x "`which $FC`") then 
     echo Can not find Fortran compiler  $FC
 
      if(test -x "`which gfortran`") then
         echo gfortran is detected!
         FC=gfortran
         FFLAGS=
         lFort=-lgfortran
      else   
      if(test -x "`which g77`") then
         echo g77 is detected! 
         FC=g77
         FFLAGS=-fno-automatic
         lFort=-lg2c
      else   
      if(test -x "`which f77`") then
         echo f77 is detected! 
         FC=f77
         echo default compiler flags are used for F77
         FFLAGS=
         lFort=
      else    
          echo Fortran compiler is not detected. 
          FC=
          FFLAGS=
          return 0
      fi
      fi
      fi
  fi  

  echo Fortran compiler is detected

  $FC  -o a.out test.f  1>/dev/null 2>/dev/null
  if(test $? -ne 0) then
    echo Fatal problem in  fortran compiler:
     $FC  -o a.out test.f
     FC=
    return 1
  else 
    echo $FC OK
  fi 


  $FC $FFLAGS -o a.out test.f  1>/dev/null 2>/dev/null
  if(test $? -ne 0) then
    echo Unrecognized flags of fortran compiler
    echo improve FFLAGS in calchep/FlagsForSh 
    return 1
  else 
    echo FFLAGS OK
  fi 
  rm -f a.out 
  return 0
}

checklFort()
{
cat >test.f <<EOF
C     TEST     
      INTEGER FUNCTION XXXX()
      WRITE(*,*) 'test program'
      XXXX=5
      RETURN
      END
EOF

$FC $FFLAGS -c test.f  1>/dev/null 2>/dev/null

cat >ctest.c <<EOF
extern int xxxx(void);
int main(void) {  return xxxx_(); }
EOF

$CC $CFLAGS -o a.out ctest.c test.o  $lFort 1>/dev/null 2>/dev/null
if(test $? -ne 0) then
   echo Problem with C-FORTRAN linking. Not fatal.
   echo Find the name and disposition of Fortran libraries and fill
   echo "    lFort=\" -L <disposition> -l<name> \""
   echo in FlagsForSh
   lFort=
   return 1
fi
return 0  
}

checkNUM()
{ 
# check  of user defined  interger  type for symbolic calculation 
if(test -z "$SNUM") then 
   SNUM=OFF
fi 


if(test $SNUM = "-DNUM_LONG_LONG" -o $SNUM = "OFF"  ) then
  echo "int  main(void){return (sizeof(long long ));}" >test.c
  $CC -o a.out test.c 1>/dev/null 2>/dev/null
  if(test $? -ne 0) then
     echo -DNUM_LONG_LONG option is refused
     SNUM="OFF"
  else
    if(test $SNUM = "OFF") then
    ./a.out
      if(test $? -ge 8) then 
        SNUM=-DNUM_LONG_LONG
      fi
    fi
  fi
fi


if(test "$SNUM" = "OFF") then
# selection of integer type for symbolic calculation 
 
  echo "int  main(void){ return (sizeof(long ));}" >test.c

  $CC -o a.out test.c 1>/dev/null 2>/dev/null
  ./a.out
  if(test $? -ne 8) then
     SNUM="-DNUM_DOUBLE"
     echo the type 'double' will  present whole numbers in symbolic calculations
  else
     SNUM="-DNUM_LONG"
     echo the tyle 'long'  will be used for symbolic calculations
  fi
fi


writeFlags
}

testSO()
{
cat >test.c<<EOF
#include<stdlib.h>
double *Q=NULL;
void xxx(void)
{ int i;
  Q=(double*) realloc(Q,10*sizeof(double));
  for(i=0;i<10;i++) Q[i]=0;
}
EOF
                                                                                
$CC $CFLAGS $SHARED -o test.$SO  test.c  1>/dev/null 2>/dev/null
if(test $? -ne 0) then
  echo can not generate shared  library
#  if(test $CC = gcc) then 
     echo tring to add -fPIC option 
     CFLAGS="$CFLAGS -fPIC"
     CXXFLAGS="$CXXFLAGS -fPIC"
     $CC $CFLAGS $SHARED -o test.$SO  test.c  1>/dev/null 2>/dev/null
     if(test $? -ne 0) then
       echo .. it does not help
       writeFlags 
       return 1
     else 
       writeFlags
     fi   
#  fi
fi   

echo : shared liblary generation OK
return 0
}


checkFCNTL()
{
cat >test.c<<EOF
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
                                                                                
int main(void)
{
int fd;
  struct flock myLock;
  myLock.l_type= F_WRLCK;       /*  F_RDLCK ||  F_WRLCK || F_UNLCK */
  myLock.l_whence=SEEK_SET;
  myLock.l_start=0;
  myLock.l_len=10; 
                                                                                
fd=open("myLock",O_WRONLY|O_CREAT,0666);
if(fd<0) return fd;
return fcntl(fd, F_GETLK, &myLock);
                                                                              
}
EOF
                                                                                
$CC -o a.out $CFLAGS test.c
if(test $? -eq 0) then
   ./a.out
    if(test $? -eq 0) then
       echo FCNTL OK
       return 0
    fi
fi
return 1
}

#==================== Starting point ============
rm -rf fTest
mkdir fTest
cd fTest


if(test -r ../FlagsForSh) then
  . ../FlagsForSh

#if(test -z "$LX11") then
#    LX11=-lX11
#fi


else 
  findMAKE
echo MAKE= $MAKE
  defaultFlags
  writeFlags  
fi

testCC;  if(test $? -ne 0  ) then  exit 1; fi

testSO;  if(test $? -ne 0  ) then  exit 1; fi

if(test -z "$LX11") then 
  echo You have empty LX11 parameter that means that 
  echo calchep will be compiled for  "Blind" job only.  
  echo"
  If you  would like to use CalcHEP in interactive
  mode, please, install the following additional package:
    libX11-devel    for Fedora/Scientific, Darwin(MAC)
    libX11-dev      for Ubuntu/Debian [old Ubunty]
    libx11-dev      for Ubuntu/Debian [new Ubunty]
    xorg-x11-devel  for SUSE"

else 
 testX11
 if(test $? -ne 0) then 
    echo   Trying to detect X11 
    findX11
    if(test $? -ne 0) then
       echo X11 not detected. CalcHEP will be compiled in Blind mode
       LX11=
       writeFlags
    fi    
 fi 
fi

checkNUM

# FORTRAN COMPILER


testFC;  
  if(test $? -eq 0 ) 
     then checklFort; 
  else 
   if(test -n "$MICROMEGAS") then exit 1 ; fi 
  fi


writeFlags
cd ..
rm -fr fTest

writeFlagsForMake
exit 0
