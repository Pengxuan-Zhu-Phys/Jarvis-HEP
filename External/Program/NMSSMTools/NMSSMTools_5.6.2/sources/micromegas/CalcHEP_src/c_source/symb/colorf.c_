/*
 Copyright (C) 1997, Alexander Kryukov
*/
/**********************************************************/
/*  CopyRight (C) 1990, SCL                               */
/*  Author        A.Kryukov                               */
/*  E-mail        kryukov@theory.npi.msu.su               */
/*  Version       4.61                                    */
/*--------------------------------------------------------*/
/*  Last Rev.     08/01/90                                */
/*                18/02/94    t2k - gluon transfer vert.  */
/*                19/03/99    findl fix tedpole bug       */
/**********************************************************/

#ifdef CALCHEP
#include "syst2.h"
#define malloc m_alloc
#else
#include<stdio.h>
#include<stdlib.h>
#include <memory.h>
#include <string.h>

#endif
#include "syst.h"
#include "colorf.h"

int MAXGLEN, MAX_POW;
#define CERRLEV1 0    /*  Run time error level            */
#define CERRLEV2 0    /*  Halt level                      */ 

static int cerror(int n,char* s)
{ /*  - generate error message occur in color package - 08/01/90  */

   fprintf(stdout,"***** %s\n",s);
        if (n > CERRLEV1) fprintf(stderr,"Error  %u in  colorf.c \n",n), sortie(55);
   else if (n > CERRLEV2) sortie(56); 
   return 0;
}  

/*==============     FACTOR SESSION ==================*/

static void fct_init(factor * fct) 
{ fct->len=0; fct->dpow=0; fct->dc=1; 
  MAX_POW=10;
  fct->nc=malloc(MAX_POW*sizeof(long));
}

static void add_fct(factor *f, long sgn, long pow2,int powN,int powNN_1)
{ long dd;
  int i,j;
  if(!sgn) return;
   
  if (pow2>=0) sgn*=f->dc<<pow2  ; else
  {  pow2=1<<(-pow2);
     if(pow2>f->dc) {dd=pow2/f->dc; f->dc=pow2; for(i=0;i<f->len;i++) f->nc[i]*=dd;}
     else if(pow2<f->dc) sgn*=f->dc/pow2;
  }

  if(-powN>f->dpow)
  { dd=-powN-f->dpow; f->dpow=-powN;
    f->len+=dd; 
    if(f->len>MAX_POW) {MAX_POW=2*f->len; f->nc=realloc(f->nc,MAX_POW*sizeof(long));}
    for(i= f->len-1; i>=dd; i--) f->nc[i]=f->nc[i-dd];
    for(i=0;i<dd;i++)f->nc[i]=0;
    powN=0;
  } else powN=f->dpow+powN;

  if(f->len < powN+2*powNN_1+1)
  {  dd=powN+2*powNN_1+1 - f->len;
     f->len=powN+2*powNN_1+1;
     if(f->len>MAX_POW){MAX_POW=2*f->len; f->nc=realloc(f->nc,MAX_POW*sizeof(long));}
     for(i= f->len-dd; i<f->len;i++) f->nc[i]=0;
  }

  if(powNN_1&1) sgn*=-1;
  for(i=0,j=0; i<1+2*powNN_1; i+=2,j++)
  { f->nc[i+powN]+=sgn;
    sgn=  -sgn*(powNN_1-j)/(j+1);
  }

  for(dd=0; !f->nc[dd] && dd<f->len;dd++);
  if(dd)
  {
     for(i=0;i<f->len-dd; i++) f->nc[i]= f->nc[i+dd];
     f->len-=dd;
     f->dpow-=dd;
  }
  if(!f->len) {f->dpow=0; f->dc=1; f->len=1; f->nc[0]=0;}

  dd=f->dc-1;
  for(i=0;i<f->len && dd;i++)  while(f->nc[i]&(long)dd) dd/=2;
  if(dd){ dd++; for(i=0;i<f->len;i++) f->nc[i]/=dd; f->dc/=dd; }
}
/* ================= END OF FACTOR ==================== */

#define CDEBLEV  0    /*  Total debug level               */ 

/*################################################################*/
       
typedef struct cgraph 
   {  struct cgraph *    next;

      int          sgn, pow2, powN, powNN_1; /* factor */
      int          en;             /* Name of next edge */
      int          gl;             /* Number of vertecies (graph length) */
      int         mgl;             /* max Number of vertecies */
      cvertex  *   vl;             /* array of verticies */
   }  cgraph; 

/* ************************** Cross reference ************************* */ 
/* *                                                                  * */ 
/* *  GevV                                                            * */ 
/* *    +-----> CError                                                * */ 
/* *                                                                  * */ 
/* *  GetEN                                                           * */ 
/* *                                                                  * */ 
/* *  CError                                                          * */ 
/* *                                                                  * */ 
/* *  WrCG                                                            * */ 
/* *                                                                  * */ 
/* ******************************************************************** */ 


//#  if (CDEBLEV > DEBLEV) 
static char  vtarr[7][6]  = {"ZV", "TV", "G2", "QG", "G3","Q3","Q3_"};

static void wrcg(cgraph* cg)
{/*  Write C-graph on standard device - 04/01/90 */ 
   int      i; 
   printf("Kr: [(%d*2^%d) N^%d (N^2-1)^%d \n",
	   cg->sgn,cg->pow2,cg->powN,cg->powNN_1);
   for (i =0; i< cg->mgl; i++)
      if (cg->vl[i].vt != zv)
      {
	fprintf(stderr,"(%d/%d  ",i,cg->vl[i].vt);
	fprintf(stderr,"%d,%d,%d)",
	 cg->vl[i].e[0],cg->vl[i].e[1],cg->vl[i].e[2]);
      }   /* if */
   fprintf(stderr,"]\n");
} 
//#endif


static int getv2(cgraph* cg)
{ /* return number of first free vertex in C-graph - 04/01/90 */ 
 
   int      n,i,j; 
   for(n=0;n<cg->mgl;n++) if(cg->vl[n].vt == zv) break;
   if(n==cg->mgl)
   { cg->vl=realloc(cg->vl, sizeof(cvertex)*(cg->mgl+4));
     for(i=cg->mgl; i<cg->mgl+4;i++)
     { cg->vl[i].vt=zv;
       for(j=0;j<3;j++) cg->vl[i].e[j]=0;
     }
     cg->mgl+=4;
   } 
   cg->vl[n].vt = 0; 
   (cg->gl)++;  
   return n;
}     

static int getv(cgraph* cg) { return  getv2(cg)+1;}

#define SINGL   1    /* Colour singlet */ 
#define TRIPL  -3    /* Colour triplet */ 
#define ATRIPL  3    /* Colour antitriplet */ 
#define OCTET   8    /* Colour octet   */ 
#define DEBLEV 10    /*  Debug level   */ 

static cgraph * initcg(int nv, cvertex*vl)
{ 
  int i,j;  
  cgraph *cg=malloc(sizeof(cgraph));
  cg->sgn=1;  cg->pow2=0;  cg->powN=0; cg->powNN_1=0;
  cg->en = 0; 
  cg->gl = nv;
  cg->mgl= nv+2;
  cg->next=NULL;
  cg->vl= malloc( sizeof(cvertex)*cg->mgl); 
   for (i = 0; i < nv; i++) 
   { cg->vl[i]=vl[i];
     for(j=0;j<3;j++) if(vl[i].e[j]>cg->en) cg->en=vl[i].e[j];  
   }
   for (i = nv; i < cg->mgl; i++)
   {
      cg->vl[i].vt = zv; 
      cg->vl[i].e[0]=cg->vl[i].e[1] = cg->vl[i].e[2] = 0; 
   } 
   return cg;
}


static int findv(vtype vt,cgraph* cg,int * n)
{ /* return True and number first vertex with type VT in C-graph - 06/01/90 */ 
 
  int i;
  for(i=0;i<cg->gl;i++) if(cg->vl[i].vt==vt) { *n=i+1; return 1;}  
  return 0;
} 


static int findl(int e1,int n,cgraph* cg)
{ /* - find number of vertex contane edge e1 - 08/01/90  */ 
                                             /* 19/03/99 */
  int  i = 1, ok=0, e = cg->vl[n-1].e[e1-1]; 
  while (i <= cg->mgl && !ok)
  {
     if (i != n && cg->vl[i-1].vt != zv && 
          (cg->vl[i-1].e[0] == e || 
           cg->vl[i-1].e[1] == e || 
           cg->vl[i-1].e[2] == e))  ok = 1;
     else if (i == n)
           {  int j;
              for(j=1;j<3 && !ok;j++) if(cg->vl[i-1].e[(e1-1+j)%3] == e) ok=1;
              if (!ok)  i++;
            }
      else 
          i++; 
  }       
   if (i > cg->mgl) cerror(253,"FindL: nonconnected edge"); 
   return i; 
} 


static int findv2(vtype vt,cgraph* cg,int * n)
{ /* return True and number first vertex with type VT in C-graph - 06/01/90 */ 
  int  i=0; 
  for(i=0;i<cg->mgl;i++) if(cg->vl[i].vt == vt) {*n=i; return 1;} 
  return 0;   
}    

static int findl2(int e1,int n,cgraph* cg,int*l)
{ /* - find number of vertex contane edge e1 - 08/01/90  */ 
                                             /* 19/03/99 */
  int  i = 1,j, e = cg->vl[n].e[e1]; 

  for(i=0;i< cg->mgl;i++) if(cg->vl[i].vt!=zv)
  for(j=0;j<3;j++) if(cg->vl[i].e[j]==e && (i!=n || j!=e1) )
  {  if(l)*l=j; return i;}
         
   cerror(253,"FindL(2): nonconnected edge"); 
} 



static cgraph * addcg(cgraph ** cg) 
{ /*- add C-graph CG to weight structure - 16/10/99 -*/   
   cgraph  *pgl = (cgraph *) malloc(sizeof(cgraph));
   memcpy(pgl, *cg ,sizeof(cgraph)); 
   pgl->next = *cg; 
   *cg = pgl; 
   pgl->vl=malloc(sizeof(cvertex)*pgl->mgl);
   memcpy(pgl->vl,pgl->next->vl,sizeof(cvertex)*pgl->mgl);    
   return pgl;
}

static void remqg_qg2(int n0,int n1,cgraph* cg)
{  int     n2; 
/* - remove subgraph (see figure) from C-graph - 08/01/90 */
     cg->powNN_1++;                        /*           v1     */
     cg->powN--;                           /*   v2 -->--*--    */
     cg->pow2--;                           /*           :  |   */
   n2 = findl(2,n1,cg);                    /*           :  |   */
   cg->vl[n2-1].e[2] = cg->vl[n0-1].e[2];  /*   v3 --<--*--    */
}                                          /*           v0     */


static void remqg_qg(int n0,int n1, cgraph ** c)
{ /* - remove gluon connected vertex n0 and n1 (see fugure) from first C-graph - 08/01/90  */ 
  int  n2, n5;    
  cgraph * cg=*c;   
#  if (CDEBLEV > DEBLEV) 
     printf(".......RemQG-QG........%u,%u\n",(unsigned int) n0,
             (unsigned int) n1);
#  endif 
      
   cg->vl[n0-1].vt = zv; 
   cg->vl[n1-1].vt = zv; 
   cg->gl -= 2; 
   if (cg->vl[n0-1].e[1] == cg->vl[n1-1].e[2] &&   /*         v1      */
       cg->vl[n0-1].e[2] == cg->vl[n1-1].e[1])     /*    -->--*--     */
   {                                               /*   |     :  |    */
      cg->powNN_1++;                               /*   |     :  |    */
      cg->pow2--;                                  /*    --<--*--     */
   }                                               /*         v0      */
   else  if (cg->vl[n0-1].e[1] == cg->vl[n1-1].e[2])  remqg_qg2(n0,n1,cg); 
   else  if (cg->vl[n0-1].e[2] == cg->vl[n1-1].e[1])  remqg_qg2(n1,n0,cg); 
   else 
   {  
      n2 = findl(2,n0,cg);                         /*         v0        */
      cg->vl[n2-1].e[2] = cg->vl[n1-1].e[2];       /*  v2-->--*-->--v3  */
      n5 = findl(2,n1,cg);                         /*         :         */
      cg->vl[n5-1].e[2] = cg->vl[n0-1].e[2];       /*         :         */
      cg->pow2--;                                  /*  v4--<--*--<--v5  */
                                                   /*         v1        */
      cg=addcg(c); 
      cg->sgn*=-1;
      cg->powN--; 
      cg->vl[n2-1].e[2] =  cg->vl[n0-1].e[2]; 
      cg->vl[n5-1].e[2] =  cg->vl[n1-1].e[2];  
   }     
#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); 
      if (cg->next) wrcg(cg->next); 
#  endif 
} 

static void remqg_6(int n3,int n6, cgraph ** c)
{ /* - remove gluon connected vertex n0 and n1 (see fugure) from first C-graph - 08/01/90  */ 
  int  n31,n32,n61,n62, l31,l32,l61,l62,lg;
  cgraph * cg=*c;   

#  if (CDEBLEV > DEBLEV) 
     printf(".......RemQG-QG........%u,%u\n",(unsigned int) n0,
             (unsigned int) n1);
#  endif 
      
   n31=findl2(1,n3,cg,&l31);        //         v3
   n32=findl2(2,n3,cg,&l32);        //  v31-->--*-->--v32
   n61=findl2(1,n6,cg,&l61);        //         :
   n62=findl2(2,n6,cg,&l62);        //         :
   lg=cg->vl[n3].e[0];              //  v61--<--*--<--v62
                                   //         v6
   cg->pow2--;
       
   cg->vl[n3].vt = v6_33;     cg->vl[n6].vt = v_633;
   cg->vl[n3].e[0]=l62;       cg->vl[n6].e[0]=l61 ;
   cg->vl[n3].e[1]=l31 ;      cg->vl[n6].e[1]=l32;
   cg->vl[n3].e[2]=lg;        cg->vl[n6].e[2]=lg;
    
   cg=addcg(c); 
   cg->sgn*=-1;
   cg->powN--; 
   cg->vl[n3].vt = zv; 
   cg->vl[n6].vt = zv; 
   cg->gl -= 2;
    
   cg->vl[n31].e[l31] =  cg->vl[n32].e[l32]; 
   cg->vl[n61].e[l61] =  cg->vl[l62].e[l32];  
   
#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); 
      if (cg->next) wrcg(cg->next); 
#  endif 
} 




static void rev3g(int en,cvertex* v)
{ /* - reverse 3G vertex such that edge EN will be first - 08/01/90  */  
   if (en != v->e[0]) 
   {
      if (en == v->e[1]) 
      { 
         v->e[1] = v->e[2]; 
         v->e[2] = v->e[0]; 
         v->e[0] = en; 
      } 
      else  if (en == v->e[2]) 
         { 
            v->e[2] = v->e[1]; 
            v->e[1] = v->e[0]; 
            v->e[0] = en; 
         }  
         else  cerror(255,"Rev3G: Invalid select edge");
   }      
}  


static void remqg_3g(int n0,int n1, cgraph  ** c)
/* - remove gluon connected vertex n0 and n1 (see figure)
     from first C-graph - 08/01/90  */ 
{int          n2, n3;   /*         v1        */ 
 int          en;       /*  v2.....*.....v3  */ 
 cgraph * cg = *c;      /*         :         */ 
                        /*         :         */ 
                        /*  v3-->--*-->--v4  */ 
                        /*          v0       */ 
#  if (CDEBLEV > DEBLEV) 
   fprintf(stderr,".......RemQG-3G........%u,%u\n",
      (unsigned int)n0,(unsigned int)n1);
#  endif 
   rev3g(cg->vl[n0-1].e[0],&cg->vl[n1-1]); 
   n2 = findl(2,n1,cg); 
   if (cg->vl[n2-1].vt == vFabc) 
      rev3g(cg->vl[n1-1].e[1],&cg->vl[n2-1]); 
   cg->vl[n0-1].vt = qg; 
   cg->vl[n0-1].e[0] = cg->vl[n2-1].e[0]; 
   en = cg->vl[n0-1].e[2]; 
   cg->vl[n0-1].e[2] = cg->vl[n1-1].e[0]; 
   n3 = findl(3,n1,cg); 
   if (cg->vl[n3-1].vt == vFabc) 
      rev3g(cg->vl[n1-1].e[2],&cg->vl[n3-1]); 
   cg->vl[n1-1].vt = qg; 
   cg->vl[n1-1].e[0] = cg->vl[n3-1].e[0]; 
   cg->vl[n1-1].e[1] = cg->vl[n0-1].e[2]; 
   cg->vl[n1-1].e[2] = en; 

   cg=addcg(c);
   cg->sgn*=-1;
   cg->vl[n0-1].e[0] = cg->next->vl[n1-1].e[0]; 
   cg->vl[n1-1].e[0] = cg->next->vl[n0-1].e[0]; 

#  if (CDEBLEV > DEBLEV) 
       wrcg(cg); 
       wrcg(cg->next); 
#  endif 
}  /* RemQG_3G */ 

static void rem833_888(int nq,int ng, cgraph  ** c)
/* - remove gluon connected vertex n0 and n1 (see figure)
     from first C-graph - 08/01/90  */ 
{int  i0,i1,i2,        n1, n2,lg1,lg2,lq1,lq2,lg;
                        /*         v1        */ 
 int          en;       /*  v2.....*.....v3  */ 
 cgraph * cg = *c;      /*         :         */ 
                        /*         :         */ 
                        /*  v3-->--*-->--v4  */ 
                        /*          v0       */ 
#  if (CDEBLEV > DEBLEV) 
   fprintf(stderr,".......RemQG-3G........%u,%u\n",
      (unsigned int)n0,(unsigned int)n1);
#  endif 

   findl2(0,nq,cg,&i0);
   i1=(i0+1)%3;
   i2=(i1+1)%3;

   lq1=cg->vl[nq].e[1];  lq2=cg->vl[nq].e[2];
   lg1=cg->vl[ng].e[i1]; lg2=cg->vl[ng].e[i2];
   lg=cg->vl[nq].e[0];

   cg->vl[ng].vt=qg; n1=ng;
   n2=nq;

   cg->vl[n1].e[1]=lq1; cg->vl[n1].e[2]=lg; cg->vl[n2].e[1]=lg; 
   
   cg->vl[n1].e[0]= lg1; cg->vl[n2].e[0]=lg2;
   
   cg=addcg(c);
   cg->sgn*=-1;
   cg->vl[n1].e[0]= lg2; cg->vl[n2].e[0]=lg1;

#  if (CDEBLEV > DEBLEV) 
       wrcg(cg); 
       wrcg(cg->next); 
#  endif 
}  /* RemQG_3G */ 


static void rem866_Fabc(int n866,int n3g, cgraph  ** c)
{int   i0,i1,i2,l0,l1,l2,N1,N2,n1, n2;   /*         v1        */ 
// int          en;       /*  v2.....*.....v3  */ 
 cgraph * cg = *c;      /*         :         */ 
                        /*         :         */ 
                        /*  v3-->--*-->--v4  */ 
                        /*          v0       */ 
#  if (CDEBLEV > DEBLEV) 
   fprintf(stderr,".......RemQG-3G........%u,%u\n",
      (unsigned int)n0,(unsigned int)n1);
#  endif 

   findl2(0,n866,cg,&i0);
   i1=(i0+1)%3;
   i2=(i1+1)%3;
   l0=cg->vl[n3g].e[i0]; l1=cg->vl[n3g].e[i1]; l2=cg->vl[n3g].e[i2];
              
   N1=getv2(cg);  cg->vl[N1].vt=v6_33;  cg->vl[N1].e[0]=cg->vl[n866].e[1];
   N2=getv2(cg);  cg->vl[N2].vt=v_633;  cg->vl[N2].e[0]=cg->vl[n866].e[2];
   cg->vl[N1].e[2]=cg->vl[N2].e[2]= ++(cg->en);
   cg->vl[N1].e[1]= ++(cg->en); cg->vl[N2].e[1]=++(cg->en);
   
   n1=n866; cg->vl[n1].vt=qg; 
   n2=n3g;  cg->vl[n2].vt=qg;
   
   cg->vl[n1].e[2]=cg->vl[N1].e[1];  cg->vl[n2].e[1]=cg->vl[N2].e[1];
   cg->vl[n1].e[1]=cg->vl[n2].e[2]=l0; 
   
   cg->vl[n1].e[0]= l1; cg->vl[n2].e[0]=l2;

   cg=addcg(c);
   cg->sgn*=-1;
   cg->vl[n1].e[0]= l2; cg->vl[n2].e[0]=l1;

#  if (CDEBLEV > DEBLEV) 
       wrcg(cg);  wrcg(cg->next); 
#  endif 
}  

static void exp866(int n866, cgraph  ** c)
{int   N1,N2,n833;        /*         v1        */ 
// int          en;       /*  v2.....*.....v3  */ 
 cgraph * cg = *c;      /*         :         */ 
                        /*         :         */ 
                        /*  v3-->--*-->--v4  */ 
                        /*          v0       */ 
#  if (CDEBLEV > DEBLEV) 
   fprintf(stderr,".......RemQG-3G........%u,%u\n",
      (unsigned int)n0,(unsigned int)n1);
#  endif 

   N1=getv2(cg);  cg->vl[N1].vt=v_633; cg->vl[N1].e[0]=cg->vl[n866].e[1];
   N2=getv2(cg);  cg->vl[N2].vt=v6_33; cg->vl[N2].e[0]=cg->vl[n866].e[2];
   
   cg->vl[N1].e[2]=cg->vl[N2].e[2]= ++(cg->en);
   
   n833=n866; cg->vl[n833].vt=qg;
   
   cg->vl[n833].e[1]=cg->vl[N1].e[1]= ++(cg->en); 
   cg->vl[n833].e[2]=cg->vl[N2].e[1]= ++(cg->en);

#  if (CDEBLEV > DEBLEV) 
       wrcg(cg);  wrcg(cg->next); 
#  endif 
}  

static int istadpole(int n,cgraph* cg)
{ /* return True if vertex n is teadpole - 08/01/90  */ 
  
   return
      cg->vl[n-1].e[0] == cg->vl[n-1].e[1] || 
      cg->vl[n-1].e[1] == cg->vl[n-1].e[2] || 
      cg->vl[n-1].e[0] == cg->vl[n-1].e[2]    ;
}

static int istadpole2(int n,cgraph* cg)
{ /* return True if vertex n is teadpole - 08/01/90  */ 
   if(cg->vl[n].e[0] == cg->vl[n].e[1] || 
      cg->vl[n].e[1] == cg->vl[n].e[2] || 
      cg->vl[n].e[0] == cg->vl[n].e[2]    )
   { cg->sgn=0;return 1;} else return 0;   
  
}




static void remg(int n0, cgraph ** c)
{ /* - remove gluon issue from vertex n0  from first C-graph - 08/01/90  */ 
   int  n1; 
#  if (CDEBLEV > DEBLEV) 
      printf(".......RemG........%u\n",(unsigned int)n0);
      wrcg(*c); 
#  endif 
   n1 = findl(1,n0,*c); 
   if (istadpole(n0,*c) || istadpole(n1,*c)) 
   { 
      (*c)->sgn=0;
      (*c)->gl = 0; 
      (*c)->vl[n0-1].vt = zv; 
      (*c)->vl[n1-1].vt = zv; 
#     if (CDEBLEV > DEBLEV) 
         wrcg(*c); 
#     endif 
   }
   else  if((*c)->vl[n1-1].vt==qg) remqg_qg(n0,n1,c); else remqg_3g(n0,n1,c); 

#  if (CDEBLEV > DEBLEV) 
     fprintf(stderr,".......end RemG........\n");
#  endif 
} /* RemG */ 

static void remtv(cgraph * pgl )
{ /* Remove transfered vertex from all C-graphs - 06/01/90     */ 

 int         n, n1; 
 int         vt0;   /* Original type */   
 int         ee;
                                           /*       v0        */ 
                                           /*  -->--*-->--v1  */ 
#if (CDEBLEV > DEBLEV)                     /*                 */ 
  fprintf(stderr,".......RemTV........\n");/*                 */
#endif                                     /*       v0        */ 
                                           /*  .....*.....v1  */ 
                                           
   while (findv2(tv,pgl,&n) || findv2(g2,pgl,&n)||findv2(t66,pgl,&n) )
   { int l;
#  if (CDEBLEV > DEBLEV)                                   
         if (pgl != NULL) wrcg(pgl);                      
#  endif                                                   
      vt0 = pgl->vl[n].vt;                                     
      pgl->gl--; 
      n1=findl2(1,n,pgl,&l); 
      if (n1==n)  switch(vt0)
      { case tv : pgl->powN++; break;
        case g2 : pgl->powNN_1++; break;
        case t66: pgl->powN++; pgl->pow2++; break;
      }                                                            
      else  pgl->vl[n1].e[l]= (vt0==g2)?pgl->vl[n].e[0]:pgl->vl[n].e[2];
      pgl->vl[n].vt = zv; 
   }                                                       
}   


static void exp3g(int n0, cgraph ** c)
{ 
 int       n1, n2, n4, n5; 
 int       e04, e05, e45; 
 cgraph * cg=*c;
 
/* expand 3G vertex (see figure) - 08/01/90  */ 
/* 14/03/99: Check tadpole before expanding */    

#  if (CDEBLEV > DEBLEV) 
      fprintf(stderr,".......Exp3G........\n");
#  endif 

   n1 = findl(1,n0,cg); 
   if (istadpole(n0,cg) || istadpole(n1,cg)) 
   {
      cg->sgn=0; 
      cg->gl = 0; 
      cg->vl[n0-1].vt = zv; 
      cg->vl[n1-1].vt = zv; 
#     if (CDEBLEV > DEBLEV) 
         wrcg(cg); 
#     endif 
      return;
   }
   n1 = findl(1,n0,cg);      /*      v0            v4  v5     */   
   n2 = findl(2,n0,cg);      /*  v1..*...v2    v1..*-<-*..v2  */   
                             /*      :              \ /       */   
   n4 = getv(cg);            /*      :      ->       *v0      */
   e45 = ++(cg->en);         /*      :               :        */
   e04 = ++(cg->en);         /*      v3              v3       */
   cg->vl[n4-1].vt = qg; 
   if (cg->vl[n1-1].vt == vFabc) 
      rev3g(cg->vl[n0-1].e[0],&cg->vl[n1-1]); 
   cg->vl[n4-1].e[0] = cg->vl[n1-1].e[0]; 
   cg->vl[n4-1].e[1] = e45; 
   cg->vl[n4-1].e[2] = e04; 
   n5 = getv(cg); 
   e05 = ++(cg->en); 
   cg->vl[n5-1].vt = qg; 
   if (cg->vl[n2-1].vt == vFabc) 
      rev3g(cg->vl[n0-1].e[1],&cg->vl[n2-1]); 
   cg->vl[n5-1].e[0] = cg->vl[n2-1].e[0]; 
   cg->vl[n5-1].e[1] = e05; 
   cg->vl[n5-1].e[2] = e45; 
   rev3g(cg->vl[n0-1].e[2],&cg->vl[n0-1]); 
   cg->vl[n0-1].vt = qg; 
   cg->vl[n0-1].e[1] = e04; 
   cg->vl[n0-1].e[2] = e05; 
   cg->sgn*=-1;  cg->pow2++;

   cg=addcg(c);   /*  Second term  */ 
   cg->vl[n0-1].e[1] = e05; 
   cg->vl[n0-1].e[2] = e04; 
   cg->vl[n4-1].e[1] = e04; 
   cg->vl[n4-1].e[2] = e45; 
   cg->vl[n5-1].e[1] = e45; 
   cg->vl[n5-1].e[2] = e05; 
   cg->sgn*=-1;
   
#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); 
      wrcg(cg->next); 
      fprintf(stderr,".......end Exp3G........\n");
#  endif 
}  /* Exp3G */ 

static void expFabc(int n0, cgraph ** c)
{ 
 int  n1,n2,l0,l1,l2,m0,m1,m2; 
 cgraph * cg=*c;
  
#  if (CDEBLEV > DEBLEV) 
      fprintf(stderr,".......Exp3G........\n");
#  endif 

   l0=cg->vl[n0].e[0];
   l1=cg->vl[n0].e[1];
   l2=cg->vl[n0].e[2];
  
   n1 = getv2(cg);
   n2 = getv2(cg);
      
   cg->vl[n0].vt=cg->vl[n1].vt=cg->vl[n2].vt=qg;
   
   cg->vl[n0].e[0]=l0;  cg->vl[n1].e[0]=l1; cg->vl[n2].e[0]=l2;
   
   cg->vl[n0].e[2]=cg->vl[n1].e[1]=m0=++(cg->en);
   cg->vl[n1].e[2]=cg->vl[n2].e[1]=m1=++(cg->en);
   cg->vl[n2].e[2]=cg->vl[n0].e[1]=m2=++(cg->en);

   cg->pow2++;
   cg=addcg(c); 
   cg->vl[n0].e[1]=cg->vl[n1].e[2]=m0;
   cg->vl[n1].e[1]=cg->vl[n2].e[2]=m1;
   cg->vl[n2].e[1]=cg->vl[n0].e[2]=m2;
   cg->sgn*=-1;      
   
#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); wrcg(cg->next); 
      fprintf(stderr,".......end Exp3G........\n");
#  endif 
}  /* Exp3G */ 



static int exp6(int n6_33,  cgraph ** c)
{  int n_633,n6_1,n6_2, l31,l32,l_31,l_32;
   cgraph * cg=*c;
   
#  if (CDEBLEV > DEBLEV) 
      fprintf(stderr,".......Exp3G........\n");
#  endif 

   n_633=findl2(0,n6_33,cg,NULL);
   if(cg->vl[n_633].vt !=v_633) return 0;
   
   n6_1=findl2(1,n6_33,cg,NULL);
   n6_2=findl2(2,n6_33,cg,NULL);
      
   if(n6_1==n_633 && n6_2==n_633) 
   { cg->pow2++; cg->powN++;
     cg->vl[n_633].vt=zv; cg->vl[n6_33].vt=zv; cg->gl-=2;
     return 1;
   }
   
   l31= cg->vl[n_633].e[1];
   l32= cg->vl[n_633].e[2];
   l_31= cg->vl[n6_33].e[1];
   l_32= cg->vl[n6_33].e[2];
   cg->pow2--;
   
   cg->vl[n_633].vt=tv;      cg->vl[n6_33].vt=tv;
   cg->vl[n_633].e[0]=0;     cg->vl[n6_33].e[0]=0;
   cg->vl[n_633].e[1]=l31;   cg->vl[n6_33].e[1]=l32;       
   cg->vl[n_633].e[2]=l_31;  cg->vl[n6_33].e[2]=l_32;
   
   cg=addcg(c); 
   cg->vl[n_633].e[1]=l32;   cg->vl[n6_33].e[1]=l31; 
   cg->vl[n_633].e[2]=l_31;  cg->vl[n6_33].e[2]=l_32;
   
#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); 
      wrcg(cg->next); 
      fprintf(stderr,".......end Exp3G........\n");
#  endif 
   return 1;
}  


static void expg66(int n0, cgraph ** c)
{ 
 int  n1, n2, n3, n6, n_6,i;  
 cgraph * cg=*c;
 
#  if (CDEBLEV > DEBLEV) 
      fprintf(stderr,".......ExpG66........\n");
#  endif 

   n1 = findl(1,n0,cg); 
   if (istadpole(n0,cg) || istadpole(n1,cg)) 
   {
      cg->sgn=0; 
      cg->gl = 0; 
      cg->vl[n0-1].vt = zv; 
      cg->vl[n1-1].vt = zv; 
#     if (CDEBLEV > DEBLEV) 
         wrcg(cg); 
#     endif 
      return;
   }
   
   n3 = findl(3,n0,cg);      
                             
   n6  = getv(cg);  cg->vl[n6 -1].vt=v6_33;  cg->vl[n6-1].e[0]=cg->vl[n0-1].e[2];
   n_6 = getv(cg);  cg->vl[n_6-1].vt=v_633;  cg->vl[n_6-1].e[0]=++(cg->en);
   
   for(i=0;i<3;i++) if(cg->vl[n0-1].e[1]==cg->vl[n3-1].e[i])
   { cg->vl[n3-1].e[i]=cg->vl[n_6-1].e[0];
      break;
   }
   
   cg->vl[n0-1].e[1]=cg->vl[n_6-1].e[1]=++(cg->en);
   cg->vl[n0-1].e[2]=cg->vl[n6-1].e[1]=++(cg->en);
   cg->vl[n6-1].e[2]=cg->vl[n_6-1].e[2]=++(cg->en);

   cg->vl[n0-1].vt=qg;
   
#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); 
      fprintf(stderr,".......end Exp3G........\n");
#  endif 
}  /* Exp3G */ 


static int exp3q(int n0, cgraph ** c)
{ 
 int  n1,l01,l11,l02,l12,i; 
 cgraph * cg=*c;
 cgraph * cg_;

#  if (CDEBLEV > DEBLEV) 
      fprintf(stderr,".......Exp3G........\n");
#  endif 

   n1 = findl2(0,n0,cg,&i);
   
   if(cg->vl[n1].vt!=q3_) return 0;
   
   if(i)
   {   cg->vl[n1].e[i]=cg->vl[n1].e[0];
       cg->vl[n1].e[0]=cg->vl[n0].e[0];
   }
   
   l01=cg->vl[n0].e[1];  l02=cg->vl[n0].e[2];
   l11=cg->vl[n1].e[1];  l12=cg->vl[n1].e[2];
   
   
   cg->vl[n0].vt = tv;  cg->vl[n0].e[0]=0; 
   cg->vl[n1].vt = tv;  cg->vl[n1].e[0]=0; 
   
   cg->vl[n0].e[1]=l11; cg->vl[n0].e[2]=l01;
   cg->vl[n1].e[1]=l12; cg->vl[n1].e[2]=l02; 
       
   cg_=addcg(c); 
   cg_->sgn*=-1;
   
   cg->vl[n0].e[1]=l12; cg->vl[n0].e[2]=l01;
   cg->vl[n1].e[1]=l11; cg->vl[n1].e[2]=l02;

#  if (CDEBLEV > DEBLEV) 
      wrcg(cg); 
      wrcg(cg->next); 
      fprintf(stderr,".......end Exp3G........\n");
#  endif 
   return 1;
}  /* Exp3Q */ 


factor *colorFactor (int nv, cvertex * vl)
{  /* - calculate color weight (two int n,d) - 08/01/90  */
   cgraph    * cg;
   int         n0,i,j;
   factor *f=(factor *)malloc(sizeof(factor));
   cgraph model;
   fct_init(f);

   cg =initcg(nv,vl);

   wrcg(cg);

#  if (CDEBLEV > DEBLEV) 
       wrcg(cg); 
#  endif 
   while(cg)
   { 
      cgraph  * pgl;
      while (cg->gl && cg->sgn)
      {  int n0,ng, l;    
         remtv(cg); if(!cg->gl) break;                 
         if(findv2(qg,cg,&n0)) 
         {  if(istadpole2(n0,cg)) break;  
            ng=findl2(0,n0,cg,&l);
            if(istadpole2(ng,cg)) break;
            switch(cg->vl[ng].vt)
            { case qg:  remqg_qg(n0+1,ng+1,&cg); continue;
              case vFabc: rem833_888(n0,ng,&cg); continue;
              case v866:remqg_6(n0,ng,&cg);      continue; 
            }  
         }
         
         if(findv2(v866,cg,&n0))
         { if(istadpole2(ng,cg)) break;
           ng=findl2(0,n0,cg,&l);
           if(istadpole2(ng,cg)) break;
           switch(cg->vl[ng].vt)
           {
             case vFabc:  rem866_Fabc(n0,ng,&cg); continue;  
//             case v866:   rem866_866(n0,ng,&cg); continue; 

             default: exp866(n0,&cg); continue; 
           }  
         }

                  
         if(findv2(v6_33,cg,&n0)) { if(exp6(n0,cg)) continue;}
         
         if(findv2(vFabc,cg,&n0)) 
          if(istadpole2(n0,cg)) break;  else {expFabc(n0,&cg);    continue; }
                   
         if(findv2(q3,cg,&n0)) { if(exp3q(n0,&(cg))) continue; }

         wrcg(cg); cerror(251,"No rules to expend diagram");
      } 
      pgl = cg;
      if(pgl->sgn)  add_fct(f,pgl->sgn,pgl->pow2,pgl->powN,pgl->powNN_1);
      cg = cg->next; 
      free(pgl->vl);  free(pgl); 
   }  
   return f;
} 


static void rednd(long * n,long * d,int b)
{ /* - reduce N and D with respect to B - 08/01/90  */
   if (b != 1)
      while (*d != 1 && *n % b == 0 && *d % b == 0)
      {
         *n /= b;
         *d /= b;
      }  /* while */
} /* RedND */


void fct_num_calc(factor * fct2,int Nc, long * n, long *d)
{ 
	int i;
	long p=1;
	factor *fct=fct2;
	
	*n=0;
	for(i=0;i<fct->len;i++) 
	{
		*n+=p*fct->nc[i]; 
		p*=Nc;
	}

	p=1;
	*d=fct->dc;
	if(fct->dpow>0)
	{
		for(i=0;i< fct->dpow;i++) *d*=Nc;
	}
	else
	{
		for(i=0;i<-fct->dpow;i++) *n*=Nc;
	}
			
	rednd(n,d,Nc); 
	rednd(n,d,2);
}

void fct_print(factor *fct, char *s)
{ int i;

  if(!fct->len)
  {
	  strcpy(s,"(0)"); 
	  return;
  }

  sprintf(s,"(");
  for(i=0;i<fct->len;i++)  
	  if(fct->nc[i]) 
	  {  
		  sprintf(s+strlen(s),"%+ld",fct->nc[i]);
		  if(i) sprintf(s+strlen(s),"N^%d",i);
	  }
  sprintf(s+strlen(s),")");

  if(fct->dpow>0) 
	  sprintf(s+strlen(s),"/(%ld*N^%d)",fct->dc,fct->dpow);
  else if(fct->dpow<0) 
	  sprintf(s+strlen(s),"*N^%d/%ld",-fct->dpow,fct->dc);
  else
	  sprintf(s+strlen(s),"/%ld",fct->dc);
}

  /* ************************** Cross reference ************************* */ 
  /* *                                                                  * */ 
  /* *  colorFactor                                                     * */ 
  /* *    +-----> RemTV                                                 * */ 
  /* *    |       +------> FindV                                        * */ 
  /* *    |       +------> isTadpole                                    * */ 
  /* *    |       +------> FindL                                        * */ 
  /* *    |       +------> Rev3G                                        * */ 
  /* *    |       +------> WrCG (Color)                                 * */ 
  /* *    |                                                             * */ 
  /* *    +-----> FindV                                                 * */ 
  /* *    +-----> RemG                                                  * */ 
  /* *    |       +------> WrCG (Color)                                 * */ 
  /* *    |       +------> FindL                                        * */ 
  /* *    |       +------> isTadpole                                    * */ 
  /* *    |       +------> RemQG_QG                                     * */ 
  /* *    |       |        +------> RemQG_QG1                           * */ 
  /* *    |       |        +------> RemQG_QG2                           * */ 
  /* *    |       |        |        +-------> FindL                     * */ 
  /* *    |       |        |                                            * */ 
  /* *    |       |        +------> FindL                               * */ 
  /* *    |       |        +------> AddCG                               * */ 
  /* *    |       |        +------> WrCG (Color)                        * */ 
  /* *    |       |                                                     * */ 
  /* *    |       +------> RemQG_3G                                     * */ 
  /* *    |                +------> Rev3G                               * */ 
  /* *    |                +------> FindL                               * */ 
  /* *    |                +------> AddCG                               * */ 
  /* *    |                +------> WrCG                                * */ 
  /* *    |                                                             * */ 
  /* *    +-----> Exp3G                                                 * */ 
  /* *    |       +------> FindL                                        * */ 
  /* *    |       +------> GetV (Color)                                 * */ 
  /* *    |       +------> GetEN (Color)                                * */ 
  /* *    |       +------> Rev3G                                        * */ 
  /* *    |       +------> AddCG                                        * */ 
  /* *    |                                                             * */ 
  /* *    +-----> CError (Color)                                        * */ 
  /* *    +-----> DispCG                                                * */ 
  /* *            +------> RedND                                        * */ 
  /* *                                                                  * */ 
  /* ******************************************************************** */

vtype typev(vert0 v,int valence)
{ int n, color=1;
 
/* Return color type of vertex - 06/01/90  */ 
      
   for (n = 0; n < valence; n++) switch(prtclbase[v[n].partcl-1].cdim)
   {
      case  8: color*=2; break;
      case  3: color*=3; break;
      case -3: color*=5; break;
      case  6: color*=7; break;
      case -6: color*=11;break;  
   }
   
{ int i, permit[]={1,4,8,15,27,30,77,99,125,175,154};
  for(i=0;i<11;i++) if(color==permit[i]) break;
  if(i==11) { printf("unknown colour vertex\n");} 
}   
   return color;
   
}  /* TypeV */ 


void t2k2(vcsect* g, int * nv, cvertex * vl)
{
  int   i,k, ne, en=0, maxnv=*nv; 
  int   maptar[2*maxvert][MAXVALENCE];
    
/* Transfer Taranov's representation of graph to Kryukov's representation  */ 
/* - 07/01/90  */ 
    
   for(i=0;i<2*maxvert;i++) for(k=0;k<MAXVALENCE;k++) maptar[i][k]=0;
   *nv=0;
   for(i=0;i<g->sizet; i++)  if (typev(g->vertlist[i],g->valence[i]) != zv) 
   { 
      if(*nv>= maxnv) cerror(251,"To many vertices");
      vl[*nv].e[0]=0; vl[*nv].e[1]=0;  vl[*nv].e[2]=0;
      vl[*nv].vt = typev(g->vertlist[i],g->valence[i]); 

      for (k=0, ne=0; ne<g->valence[i] ;ne++)
      {  int dim= prtclbase[g->vertlist[i][ne].partcl-1].cdim;
         if(dim!=1)
         {  int l=maptar[i][ne];
            if(!l)
            { 
               l = ++en; 
               maptar[i][ne] = l;
               maptar[g->vertlist[i][ne].link.vno]
                     [g->vertlist[i][ne].link.edno]=l; 
            } 
            
            switch(vl[*nv].vt)
            { case  qg: case  tv: case v866: case t66: 
                switch (dim) 
                {
                  case  8:  vl[*nv].e[0]=l;  break; 
                  case -3:
                  case -6:  vl[*nv].e[1]=l;  break; 
                  case  3: 
                  case  6:  vl[*nv].e[2]=l;  break;
                 default: cerror(252,"t2k - invalid particle color");
                }
                break;
              case  v_633: case v6_33:
                switch (dim) 
                {
                  case  6: case -6:  vl[*nv].e[0]=l;     break;
                  case  3: case -3: if(!k)k=1;  vl[*nv].e[k++] = l; break;
                }
                break;              
              default:  vl[*nv].e[k++] = l;  break; // vFabc, g2 q3,q3_
            } 
         }
      }  
      (*nv)++;
   } 
}
