[Scan]
name            :   TestScan 
save dir        :   &J/Results
sampling method :   Grid
force new run   :   true

[Sampling_Setting]
variables       :   X,  Flat,   -10,  10, 21
                    Y,  Count,  0,  100,  5
step            :   0.05
likelihood      :   CHI2,   &FC_Gauss(Z, 1, 0.3) 

[Function_01]
method          :   expression
name            :   chi21
expression      :   ( X**2 + Y**2 - 1 )**3           

[Function_02]
method          :   interpolate 1d
name            :   Xenon_2019SD
file            :   &J/External/Info/Xenon1T2019SD_p.csv

[Config]
scheme          :   &J/src/card/preference.json

[Library_Settings]
OS required     :   Linux
make paraller   :   cpu_count
root required   :   True
root path       :   @C root-config --prefix
python version  :   2.7.3
package path    :   &J/External/Library
include         :   

[Program_Settings]
package path    :   &J/External/Program
make paraller   :   cpu_count
include         :   TestFunction, Layer0_1, Layer0_2, Layer1_1, Layer1_2, Layer2_1, Layer2_2, Layer2_3, Layer3_1, Layer4_1, 

[Delphes]
required package:   None
installed       :   False
install path    :   &J/External/Library/Delphes 
source file     :   &J/External/Library/Source/Delphes-3.5.0.tar.gz 
install cmd     :   cd $Library_Settings:package path$
                    rm -rf Delphes*
                    cp $Delphes:source file$ ./
                    tar -xzf Delphes-3.5.0.tar.gz 
                    mv -T $Library_Settings:package path$/Delphes-3.5.0 $Delphes:install path$
                    cd $Delphes:install path$
                    source $Library_Settings:root path$/bin/thisroot.sh
                    ./configure
                    make -j$Library_Settings:make paraller$

[HepMC]
required package:   None
installed       :   False
install path    :   &J/External/Library/HepMC 
source file     :   &J/External/Library/Source/HepMC-2.06.09.tar.gz
install cmd     :   cd $Library_Settings:package path$
                    rm -rf HepMC*
                    cp $HepMC:source file$ ./
	                tar -xzf HepMC-2.06.09.tar.gz
	                cd $Library_Settings:package path$/HepMC-2.06.09
	                ./bootstrap
	                ./configure --with-momentum=GEV --with-length=MM --prefix=$HepMC:install path$ 
	                make -j$Library_Settings:make paraller$
	                make install

[Pythia8]
required package:   ['HepMC']
installed       :   False
install path    :   &J/External/Library/Pythia8 
source file     :   &J/External/Library/Source/pythia8230.tgz
install cmd     :   cd $Library_Settings:package path$
	                mkdir Pythia8 
                    cd $Library_Settings:package path$/Source 
                    tar -zxvf pythia8230.tgz 
                    cd $Library_Settings:package path$/Source/pythia8230
                    ./configure --with-hepmc2=$HepMC:install path$ --prefix=$Pythia8:install path$
                    make -j$Library_Settings:make paraller$
                    make install

[TestFunction]
required package:   None
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFunction
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFunction/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Y,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z00,      1,      Json
                    outFile00,1,      File,   save


[Prospino]
required package:   none
clone shadow    :   True
install path    :   &J/WorkShop/Program/Prospino
source file     :   &J/External/Program/Prospino2-master.zip
install cmd     :   cp $Prospino:source file$ $Prospino:install path$
                    cd $Prospino:install path$
                    tar -zxvf Prospino2-master.zip
                    mv -T $Prospino:install path$/Prospino2-master $Prospino:install path$/&CSID 
                    cd $Prospino:install path$/&CSID 
                    make 
prerun command  :   cp $Program_Settings:package path$/Prospino_N2X1p.f $Prospino:install path$/&CSID/Prospino2_main.f90
                    make 
run info        :   &J/External/Program/Prospino_runweb.json 
command path:   :   $Prospino:install path$/&CSID
input file      :   1,  

[Layer0_1]
required package:   None
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun01
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $Layer0_1:source file$ $Layer0_1:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $Layer0_1:install path$
run info        :   &J/WorkShop/Program/TestFun01/TestFun01_runweb.json 
command path    :   $Layer0_1:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $Layer0_1:install path$/TestFunction_input.dat 
                    2,  $Layer0_1:install path$/input.json
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Y,      1,      Position,    1,  2
output file     :   1,  $Layer0_1:install path$/output.json
#                   varID   fileID  method
output variables:   Z01,      1,      Json
                    outFile01,1,      File,   save

[Layer0_2]
required package:   None
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun02
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun02/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Y,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z02,      1,      Json
                    outFile02,1,      File,   save                    

[Layer1_1]
required package:   ['Layer0_1', 'Layer0_2']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun11
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun11/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   Z01,      1,      Position,    1,  1
                    Z02,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z11,      1,      Json
                    outFile11,1,      File,   save                    

[Layer1_2]
required package:   ['Layer0_1']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun12
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun12/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Z01,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z12,      1,      Json
                    outFile12,1,      File,   save                    

[Layer2_1]
required package:   ['Layer1_1', 'Layer0_1']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun21
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun21/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   Z11,      1,      Position,    1,  1
                    Z01,      1,      Position,    1,  2
                    X,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z21,      1,      Json
                    outFile21,1,      File,   save                    

[Layer2_2]
required package:   ['Layer1_2', 'Layer1_1']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun22
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun22/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Z12,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z22,      1,      Json
                    outFile22,1,      File,   save                    

[Layer2_3]
required package:   ['Layer0_2', 'Layer0_1', 'Layer1_1']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun23
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun23/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   Z11,      1,      Position,    1,  1
                    Y,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z23,      1,      Json
                    outFile23,1,      File,   save                    

[Layer3_1]
required package:   ['Layer1_1', 'Layer2_1']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun31
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun31/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   Z21,      1,      Position,    1,  1
                    Y,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z31,      1,      Json
                    outFile31,1,      File,   save                    

[Layer4_1]
required package:   ['Layer0_1', 'Layer3_1']
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFun41
source file     :   &J/External/Program/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFun41/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   ./TestFunction.py 
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
                    2,  $TestFunction:install path$/input.json
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Z31,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z41,      1,      Json
                    outFile41,1,      File,   save                    
