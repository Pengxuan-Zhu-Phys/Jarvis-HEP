[Scan]
name            :   NNFSC
save dir        :   &pwd
sampling method :   Grid
force new run   :   True
rerun tag       :   Free, Ready, Running, Finish, Stoped 

[Sampling_Setting]
variables       :   M1,  Flat,  0,  5.1,        2
                    M2,  Flat,  0,  5.1,        2
                    M3,  Flat,  0,  5.1,        2
                    Mu,  Flat,  0,  5.1,        2
                    MA,  Flat,  0,  5.1,        2
                    Tanbeta,  Flat,  0,  5.1,   2
                    ML1,  Flat,  0,  5.1,       2
                    ME1,  Flat,  0,  5.1,       2
                    ML3,  Flat,  0,  5.1,       2
                    ME3,  Flat,  0,  5.1,       2
                    MQ1,  Flat,  0,  5.1,       2
                    MU1,  Flat,  0,  5.1,       2
                    MD1,  Flat,  0,  5.1,       2
                    MQ3,  Flat,  0,  5.1,       2
                    MU3,  Flat,  0,  5.1,       2
                    MD3,  Flat,  0,  5.1,       2
                    AE,  Flat,  0,  5.1,        2
                    AU,  Flat,  0,  5.1,        2
                    AD,  Flat,  0,  5.1,        2
step            :   0.05
likelihood      :   CHI2,   &FC_Gauss(Z, 1, 0.3) 

[Function_01]
method          :   expression
name            :   chi21
expression      :   ( X**2 + Y**2 - 1 )**3           

[Function_02]
method          :   interpolate 1d
name            :   Xenon_2019SD
file            :   &J/External/Info/Xenon1T2019SD_p.csv

[Config]
scheme          :   &J/src/card/preference.json

[Library_Settings]
OS required     :   Linux
make paraller   :   cpu_count
root required   :   True
#root path : abd
root path       :   @C root-config --prefix
python version  :   2.7.3
package path    :   &J/External/Library
include         :   Delphes, HepMC, Pythia8, MadGraph

[Program_Settings]
package path    :   &J/External/Program
make paraller   :   cpu_count
include         :   SusyHIT, GM2Calc, MicrOMEGAs, HiggsBounds, HiggsSingals, Prospino, MG5&Pythia, CheckMATE, Vevcious, PhaseTracer  

[SusyHIT]
required package:   None
clone shadow    :   True
install path    :   &J/WorkShop/Program/susyhit
source file     :   &J/External/Program/susyhit/susyhit.tar.gz
install cmd     :   cp $SusyHIT:source file$ $SusyHIT:install path$
                    cd $SusyHIT:install path$
                    tar -zxvf susyhit.tar.gz 
                    make -j$Library_Settings:make paraller$
prerun command  :   cp &J/External/Program/susyhit/susyhit.in $SusyHIT:install path$
                    make 
                    cp &J/External/Program/susyhit/slhaspectrum.in $SusyHIT:install path$
run info        :   &J/WorkShop/Program/susyhit/susyhit_runweb.json 
command path    :   $SusyHIT:install path$
excute command  :   rm susyhit_slha.out 
                    ./run slhaspectrum.in
input file      :   1,  $SusyHIT:install path$/slhaspectrum.in 
#                   varID   fileID  method
input variables :   M1,     1,      Replace,    >>>>Test<<<<<
                    M2,     1,      Replace,    >>>>Test<<<<<
                    M3,     1,      Replace,    >>>>Test<<<<<
                    Mu,     1,      Replace,    >>>>Test<<<<<
                    MA,     1,      Replace,    >>>>Test<<<<<
                    Tanbeta,1,      Replace,    >>>>Test<<<<<
                    ML1,    1,      Replace,    >>>>Test<<<<<
                    ME1,    1,      Replace,    >>>>Test<<<<<
                    ML3,    1,      Replace,    >>>>Test<<<<<
                    ME3,    1,      Replace,    >>>>Test<<<<<
                    MQ1,    1,      Replace,    >>>>Test<<<<<
                    MU1,    1,      Replace,    >>>>Test<<<<<
                    MD1,    1,      Replace,    >>>>Test<<<<<
                    MQ3,    1,      Replace,    >>>>Test<<<<<
                    MU3,    1,      Replace,    >>>>Test<<<<<
                    MD3,    1,      Replace,    >>>>Test<<<<<
                    AE,     1,      Replace,    >>>>Test<<<<<
                    AU,     1,      Replace,    >>>>Test<<<<<
                    AD,     1,      Replace,    >>>>Test<<<<<
output file     :   1,  $SusyHIT:install path$/susyhit_slha.out
#                   varID   fileID  method
output variables:   mh1,    1,      SLHA,   DECAY,  2000013   
                    spectr, 1,      File,   save 

[Delphes]
required package:   None
installed       :   False
install path    :   &J/External/Library/Delphes 
source file     :   &J/External/Library/Source/Delphes-3.5.0.tar.gz 
install cmd     :   cd $Library_Settings:package path$
                    rm -rf Delphes*
                    cp $Delphes:source file$ ./
                    tar -xzf Delphes-3.5.0.tar.gz 
                    mv -T $Library_Settings:package path$/Delphes-3.5.0 $Delphes:install path$
                    cd $Delphes:install path$
                    source $Library_Settings:root path$/bin/thisroot.sh
                    ./configure
                    make -j$Library_Settings:make paraller$

[HepMC]
required package:   None
installed       :   False
install path    :   &J/External/Library/HepMC 
source file     :   &J/External/Library/Source/HepMC-2.06.09.tar.gz
install cmd     :   cd $Library_Settings:package path$
                    rm -rf HepMC*
                    cp $HepMC:source file$ ./
	                tar -xzf HepMC-2.06.09.tar.gz
	                cd $Library_Settings:package path$/HepMC-2.06.09
	                ./bootstrap
	                ./configure --with-momentum=GEV --with-length=MM --prefix=$HepMC:install path$ 
	                make -j$Library_Settings:make paraller$
	                make install

[TestFunction]
required package:   None
clone shadow    :   True
install path    :   &J/WorkShop/Program/TestFunction
source file     :   &J/External/Program/TestFunction/TestFunction.py 
install cmd     :   cp $TestFunction:source file$ $TestFunction:install path$
prerun command  :   cp &J/External/Program/TestFunction/TestFunction_input.dat $TestFunction:install path$
run info        :   &J/WorkShop/Program/TestFunction/TestFunction_runweb.json 
command path    :   $TestFunction:install path$
excute command  :   rm output.json
                    ./TestFunction.py 
                    rm TestFunction_input.dat
input file      :   1,  $TestFunction:install path$/TestFunction_input.dat 
#                   varID   fileID  method
input variables :   X,      1,      Position,    1,  1
                    Y,      1,      Position,    1,  2
output file     :   1,  $TestFunction:install path$/output.json
#                   varID   fileID  method
output variables:   Z,      1,      Json
                    Time,   1,      Json
                    outFile,1,      File,   save


